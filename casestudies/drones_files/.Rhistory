library(dplyr)
library(lubridate)
library(ggplot2)
library(ggeffects)
library(ggrepel)
library(xgboost)
library(caret)
library(stringr)
library(tidyr)
library(pROC)
path <- "C:/Users/Maaz/Dropbox/CEAstuff/"
P_USE <- 0.457 # from Bogle
MIN_DELTA_USE <- 90
set.seed(42)
calc_p_use <- function(t) {
if (t<90){ # if under a 1min30, not used
return(0)
}
else {
# P(300) = 0.5
return(1/(1+exp(-0.01*(t-300))))
# to do PSA, can do uniform(f(x), g(x)), where f and g are two logistics
}
}
# READ DATA
df <- read.csv("PROCESSED.csv", header=TRUE)
dronetimes <- read.csv("dronetimes.csv", header=TRUE)
# fit shockable model
train_ind <- createDataPartition(df$pdisp, p = .8, list = FALSE, times = 1)
train <- df[train_ind,]
test <- df[-train_ind,]
shock_model <- glm(shock ~ time_to_rig + estagev + sexp + witbys, data=train, family="binomial")
# evaluation of shock model
auc(test$shock, predict(shock_model, test, type="response"))
# fit pdisp ~ time_to_rig model
# uses stratified train/test split
# and, max.depth=1 based on hyperparam search
train_ind <- createDataPartition(df$pdisp, p = .8, list = FALSE, times = 1)
train <- df[train_ind,]
test <- df[-train_ind,]
pdisp_model <- glm(pdisp ~ time_to_rig + estagev + sexp + shock + witbys, data=train, family="binomial")
#pdisp_model <- xgboost(data=as.matrix(select(train, time_to_rig, estagev, sexp, shock, witbys)), label=train$pdisp, max.depth = 20, eta = 1, nthread = 2, nrounds = 100, objective = "binary:logistic", verbose=0)
# evaluation of pdisp_model
auc(test$pdisp, predict(pdisp_model, test, type="response"))
# fit v2egimrs ~ time_to_aed model on those that make it to hospital
df_temp <- filter(df, pdisp==1, !is.na(v2egimrs))
train_ind <- createDataPartition(df_temp$v2egimrs, p = .8, list = FALSE, times = 1)
train <- df_temp[train_ind,]
test <- df_temp[-train_ind,]
# model to output probabilities from mRS 0-6
# hyperparam tuning for mrs model xgboost
# param_grid <- expand.grid(
#   nrounds = c(50, 100, 150),
#   max_depth = c(3, 6, 9),
#   eta = c(0.01, 0.1, 0.3),
#   gamma = c(0, 0.1, 0.2, 0.3),
#   colsample_bytree = c(0.8, 1),
#   min_child_weight = c(0.8, 1),
#   subsample = c(0.8, 1)
# )
#
# # Set up the control for the grid search
# ctrl <- trainControl(
#   method = "cv",
#   number = 5, # 5-fold cross-validation
#   verboseIter = TRUE
# )
#
# # Perform grid search with XGBoost
# tuned_model <- train(
#   x = train %>% select(time_to_rig, estagev, sexp, witbys, shock),
#   y = train %>% pull(v2egimrs) %>% factor() %>% as.numeric(),
#   method = "xgbTree",
#   trControl = ctrl,
#   tuneGrid = param_grid
# )
# Final--
# Fitting nrounds = 50, max_depth = 3, eta = 0.1, gamma = 0, colsample_bytree = 0.8, min_child_weight = 1, subsample = 0.8
mrs_model <- xgboost(data=as.matrix(select(train, time_to_rig, estagev, sexp, witbys, shock)), label=train$v2egimrs, max.depth = 3, eta = 0.1, gamma = 0, nrounds = 50, colsample_bytree = 0.8, min_child_weight = 1, subsample = 0.8, nthread = 2, objective = "multi:softprob", verbose=0, num_class=7)
# evaluation of mrs_model
preds <- predict(mrs_model, as.matrix(select(test, time_to_rig, estagev, sexp, witbys, shock))) %>% matrix(ncol=7, byrow=TRUE)
colnames(preds) <- c("0", "1", "2", "3", "4", "5", "6")
multiclass.roc(test$v2egimrs, preds)
# mrs model for mrs 0-5 (only survivors) for imputation
df_temp <- filter(df, pdisp==1, surv==1, !is.na(v2egimrs), v2egimrs!=6)
train_ind <- createDataPartition(df_temp$v2egimrs, p = .8, list = FALSE, times = 1)
train <- df_temp[train_ind,]
test <- df_temp[-train_ind,]
# hyperparam tuning
# param_grid <- expand.grid(
#   nrounds = c(50, 100, 150),
#   max_depth = c(3, 6, 9),
#   eta = c(0.01, 0.1, 0.3),
#   gamma = c(0, 0.1, 0.2, 0.3),
#   colsample_bytree = c(0.8, 1),
#   min_child_weight = c(0.8, 1),
#   subsample = c(0.8, 1)
# )
#
# # Set up the control for the grid search
# ctrl <- trainControl(
#   method = "cv",
#   number = 5, # 5-fold cross-validation
#   verboseIter = TRUE
# )
#
# # Perform grid search with XGBoost
# tuned_model <- train(
#   x = train %>% select(time_to_rig, estagev, sexp, witbys, shock),
#   y = train %>% pull(v2egimrs) %>% factor() %>% as.numeric(),
#   method = "xgbTree",
#   trControl = ctrl,
#   tuneGrid = param_grid
# )
# Final --
# Fitting nrounds = 50, max_depth = 3, eta = 0.1, gamma = 0.3, colsample_bytree = 0.8, min_child_weight = 0.8, subsample = 1 on full training set
mrs_model_imputer <- xgboost(data=as.matrix(select(train, time_to_rig, estagev, sexp, witbys, shock)), label=train$v2egimrs, max.depth = 3, eta = 0.1, gamma = 0.3, nrounds = 50, colsample_bytree = 0.8, min_child_weight = 0.8, subsample = 1, nthread = 2, objective = "multi:softprob", verbose=0, num_class=6)
# evaluation of mrs imputer
preds <- predict(mrs_model_imputer, as.matrix(select(test, time_to_rig, estagev, sexp, witbys, shock))) %>% matrix(ncol=6, byrow=TRUE)
colnames(preds) <- c("0", "1", "2", "3", "4", "5")
multiclass.roc(test$v2egimrs, preds)
# impute v2egimrs for survivors
# COMMENT THIS OUT FOR SENS ANALYSIS TO EXCLUDE THE ONES WITH MISSING MRS
df <- df %>% mutate(v2egimrs = case_when(
pdisp != 0 & is.na(v2egimrs) ~ predict(mrs_model_imputer, as.matrix(time_to_rig, estagev, sexp, witbys, shock)) %>% matrix(ncol=6, byrow=TRUE) %>% max.col() - 1,
TRUE ~ v2egimrs
))
mrs_vals <- read.csv("C:/Users/Maaz/Dropbox/CEAstuff/Maaz/mrs_lifetime_stats.csv", header=TRUE)
mrs_vals <- read.csv("C:/Users/MaazPC/Dropbox/CEAstuff/Maaz/mrs_lifetime_stats.csv", header=TRUE)
mrs_vals <- read.csv("mrs_lifetime_stats.csv", header=TRUE)
util_vec <- mrs_vals$util
cost_vec <- mrs_vals$cost
df <- df %>% left_join(dronetimes, by="id")
# pre calculate base case
df <- df %>% mutate(
base_util = case_when(
pdisp==0 ~ 0,
TRUE ~ util_vec[v2egimrs+1]
),
base_cost = case_when(
pdisp==0 ~ 0,
TRUE ~ cost_vec[v2egimrs+1]
)
)
#n_cvar15 <- read.csv(paste0(path, "DroneLocations/AllRegions_CVaR15locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
#n_cvar30 <- read.csv(paste0(path, "DroneLocations/AllRegions_CVaR30locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
#n_cvar50 <- read.csv(paste0(path, "DroneLocations/AllRegions_CVaR50locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
#n_median60 <- read.csv(paste0(path, "DroneLocations/AllRegions_Median60locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
#n_median120 <- read.csv(paste0(path, "DroneLocations/AllRegions_Median120locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
#n_median180 <- read.csv(paste0(path, "DroneLocations/AllRegions_Median180locs_2010.csv"), header=FALSE) %>% select(V3) %>% sum()
scenarios <- c("cove20" = 20)
run_base <- function(filter_statement=""){
temp <- df
# filter for subpop
if (filter_statement!=""){
temp <- temp %>% filter(eval(rlang::parse_expr(filter_statement)))
}
return(data.frame(list(plan = "base",
n = 0,
cost = sum(temp$base_cost),
util = sum(temp$base_util),
n_prehosp_deaths = sum(temp$pdisp==0),
n_posthosp_deaths = sum(temp$v2egimrs %in% c(6)),
n_survivors = sum(temp$v2egimrs %in% c(0,1,2,3,4,5)),
n_discharge_mild = sum(temp$v2egimrs %in% c(0,1,2)),
n_discharge_severe = sum(temp$v2egimrs %in% c(3,4,5))))
)
}
# returns list of results for each scenario (given the drone time column)
# total cost, total utils, number of deaths pre-hospital, number of deaths post-hospital, number of discharges at 0/1/2, number of discharges at 3/4/5
run_sim <- function(scenario, this_n_drones, filter_statement=""){
curr_col <- paste0("times_", scenario)
temp <- df
# filter for subpop
if (filter_statement!=""){
temp <- temp %>% filter(eval(rlang::parse_expr(filter_statement)))
}
temp <- temp %>% mutate(delta = time_to_rig-!!sym(curr_col)) %>%
mutate(p_used = pmin(delta>=MIN_DELTA_USE, P_USE)) # delta must be larger than threshold for use
# predict shock
shock_covars = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys)
temp$p_shock <- pmax(temp$shock, shock_model %>% predict(shock_covars, type="response"))
# predict pdisp
# p_shock * pdisp_model(..., shock=1) + (1-p_shock) * pdisp_model(..., shock=0)
# and enforce monotonicty
pdisp_covars_0 = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=0)
pdisp_covars_1 = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=1)
temp$p_gotohosp <- pmax(temp$pdisp,
temp$p_shock * predict(pdisp_model, pdisp_covars_1, type="response") +
(1-temp$p_shock) * predict(pdisp_model, pdisp_covars_0, type="response"))
# predict mrs
# p_shock * mrs_model(..., shock=1) + (1-p_shock) * mrs_model(..., shock=0)
mrs_covars_0 = as.matrix(select(temp, time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=0))
mrs_covars_1 = as.matrix(select(temp, time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=1))
temp$p_mrs <- temp$p_shock * (predict(mrs_model, mrs_covars_1) %>% matrix(ncol=7, byrow=TRUE)) +
(1-temp$p_shock) * (predict(mrs_model, mrs_covars_0) %>% matrix(ncol=7, byrow=TRUE))
# enforce monotonicty of mrs
# assign zero probability mass to mrs categories worse than the base case via a masking matrix
# and then renormalize
mask_matrix <- outer(1:nrow(temp), 0:6, function(i,j) as.numeric(j <= temp$v2egimrs[i] | is.na(temp$v2egimrs)))
temp$p_mrs <- temp$p_mrs * mask_matrix # mask so that 0 prob on worse MRS
temp$p_mrs <- temp$p_mrs / rowSums(temp$p_mrs) # renormalize
write.csv(temp, file="patient_table.csv")
# calculate costs and utilities
temp <- temp %>% mutate(drone_util = (p_used*p_gotohosp*p_mrs) %*% util_vec + p_used*(1-p_gotohosp)*0 + (1-p_used)*base_util,
drone_cost = (p_used*p_gotohosp*p_mrs) %*% cost_vec + p_used*(1-p_gotohosp)*0 + (1-p_used)*base_cost)
#return(temp)
# note all calculations here are essentially "weighted"
# e.g., prehospital deaths: if aed is not used, then revert to base case; if it is, then look at what model predicted
# hence we get (1-p_used)*(pdisp==0) + p_used*(1-p_gotohosp) to cover these two cases
# costs
# 60000*this_n_drones for ports
# 44000*this_n_drones for drones
# 5000*10*this_n_drones for maint
# 275*nrow(temp) for launches
return(list(plan = scenario,
n = this_n_drones,
cost = sum(temp$drone_cost) + 60000*this_n_drones + 44000*this_n_drones + 5000*10*this_n_drones + 275*nrow(temp),
util = sum(temp$drone_util),
n_prehosp_deaths = sum((1-temp$p_used)*(temp$pdisp==0) + temp$p_used*(1-temp$p_gotohosp)),
n_posthosp_deaths = sum((1-temp$p_used)*(temp$v2egimrs %in% c(6)) + temp$p_used*temp$p_gotohosp*temp$p_mrs[,7]),
n_survivors = sum((1-temp$p_used)*(temp$v2egimrs %in% c(0,1,2,3,4,5)) + temp$p_used*temp$p_gotohosp*(1-temp$p_mrs[,7])),
n_discharge_mild = sum((1-temp$p_used)*(temp$v2egimrs %in% c(0,1,2))) + sum(temp$p_used*temp$p_gotohosp*temp$p_mrs[,1:3]),
n_discharge_severe = sum((1-temp$p_used)*(temp$v2egimrs %in% c(3,4,5))) + sum(temp$p_used*temp$p_gotohosp*temp$p_mrs[,4:6]))
)
}
run_sim("cove20", 20)
run_sim("cove20", 20)
# returns list of results for each scenario (given the drone time column)
# total cost, total utils, number of deaths pre-hospital, number of deaths post-hospital, number of discharges at 0/1/2, number of discharges at 3/4/5
run_sim <- function(scenario, this_n_drones, filter_statement=""){
curr_col <- paste0("times_", scenario)
temp <- df
# filter for subpop
if (filter_statement!=""){
temp <- temp %>% filter(eval(rlang::parse_expr(filter_statement)))
}
temp <- temp %>% mutate(delta = time_to_rig-!!sym(curr_col)) %>%
mutate(p_used = pmin(delta>=MIN_DELTA_USE, P_USE)) # delta must be larger than threshold for use
# predict shock
shock_covars = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys)
temp$p_shock <- pmax(temp$shock, shock_model %>% predict(shock_covars, type="response"))
# predict pdisp
# p_shock * pdisp_model(..., shock=1) + (1-p_shock) * pdisp_model(..., shock=0)
# and enforce monotonicty
pdisp_covars_0 = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=0)
pdisp_covars_1 = temp %>% select(time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=1)
temp$p_gotohosp <- pmax(temp$pdisp,
temp$p_shock * predict(pdisp_model, pdisp_covars_1, type="response") +
(1-temp$p_shock) * predict(pdisp_model, pdisp_covars_0, type="response"))
# predict mrs
# p_shock * mrs_model(..., shock=1) + (1-p_shock) * mrs_model(..., shock=0)
mrs_covars_0 = as.matrix(select(temp, time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=0))
mrs_covars_1 = as.matrix(select(temp, time_to_rig=!!sym(curr_col), estagev, sexp, witbys) %>% mutate(shock=1))
temp$p_mrs <- temp$p_shock * (predict(mrs_model, mrs_covars_1) %>% matrix(ncol=7, byrow=TRUE)) +
(1-temp$p_shock) * (predict(mrs_model, mrs_covars_0) %>% matrix(ncol=7, byrow=TRUE))
# enforce monotonicty of mrs
# assign zero probability mass to mrs categories worse than the base case via a masking matrix
# and then renormalize
mask_matrix <- outer(1:nrow(temp), 0:6, function(i,j) as.numeric(j <= temp$v2egimrs[i] | is.na(temp$v2egimrs)))
temp$p_mrs <- temp$p_mrs * mask_matrix # mask so that 0 prob on worse MRS
temp$p_mrs <- temp$p_mrs / rowSums(temp$p_mrs) # renormalize
write.csv(temp %>% select(pdisp, v2egimrs, p_used, p_shock, p_gotohosp, p_mrs), file="patient_table.csv")
# calculate costs and utilities
temp <- temp %>% mutate(drone_util = (p_used*p_gotohosp*p_mrs) %*% util_vec + p_used*(1-p_gotohosp)*0 + (1-p_used)*base_util,
drone_cost = (p_used*p_gotohosp*p_mrs) %*% cost_vec + p_used*(1-p_gotohosp)*0 + (1-p_used)*base_cost)
#return(temp)
# note all calculations here are essentially "weighted"
# e.g., prehospital deaths: if aed is not used, then revert to base case; if it is, then look at what model predicted
# hence we get (1-p_used)*(pdisp==0) + p_used*(1-p_gotohosp) to cover these two cases
# costs
# 60000*this_n_drones for ports
# 44000*this_n_drones for drones
# 5000*10*this_n_drones for maint
# 275*nrow(temp) for launches
return(list(plan = scenario,
n = this_n_drones,
cost = sum(temp$drone_cost) + 60000*this_n_drones + 44000*this_n_drones + 5000*10*this_n_drones + 275*nrow(temp),
util = sum(temp$drone_util),
n_prehosp_deaths = sum((1-temp$p_used)*(temp$pdisp==0) + temp$p_used*(1-temp$p_gotohosp)),
n_posthosp_deaths = sum((1-temp$p_used)*(temp$v2egimrs %in% c(6)) + temp$p_used*temp$p_gotohosp*temp$p_mrs[,7]),
n_survivors = sum((1-temp$p_used)*(temp$v2egimrs %in% c(0,1,2,3,4,5)) + temp$p_used*temp$p_gotohosp*(1-temp$p_mrs[,7])),
n_discharge_mild = sum((1-temp$p_used)*(temp$v2egimrs %in% c(0,1,2))) + sum(temp$p_used*temp$p_gotohosp*temp$p_mrs[,1:3]),
n_discharge_severe = sum((1-temp$p_used)*(temp$v2egimrs %in% c(3,4,5))) + sum(temp$p_used*temp$p_gotohosp*temp$p_mrs[,4:6]))
)
}
run_sim("cove20", 20)
